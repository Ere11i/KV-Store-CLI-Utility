#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è kv-store CLI —É—Ç–∏–ª–∏—Ç—ã.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
"""

import time
import threading
import json
from kv_store.core.store import KVStore


def demo_basic_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("-" * 40)
    
    store = KVStore()
    
    # PUT –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    store.put("user:1", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤")
    store.put("user:2", "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞")
    store.put("config:theme", "dark")
    store.put("settings:timeout", 30)
    store.put("data:complex", {"nested": {"array": [1, 2, 3]}})
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {store.size()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    # GET –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\nüìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: {store.get('user:1')}")
    print(f"–¢–µ–º–∞: {store.get('config:theme')}")
    print(f"–°–ª–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(store.get('data:complex'), ensure_ascii=False)}")
    
    # EXISTS –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è:")
    print(f"user:1 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {store.exists('user:1')}")
    print(f"user:999 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {store.exists('user:999')}")
    
    # LIST –æ–ø–µ—Ä–∞—Ü–∏–∏
    print(f"\nüìã –í—Å–µ –∫–ª—é—á–∏:")
    for key in store.keys():
        print(f"  {key}")
    
    # DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏
    print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    deleted = store.delete("user:2")
    print(f"–£–¥–∞–ª–µ–Ω: {deleted}")
    print(f"–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {store.size()}")


def demo_concurrent_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è concurrent –æ–ø–µ—Ä–∞—Ü–∏–π."""
    print("\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è concurrent –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("-" * 40)
    
    store = KVStore()
    
    results = {"success": 0, "errors": 0}
    
    def worker(worker_id, num_ops):
        """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
        for i in range(num_ops):
            try:
                key = f"worker_{worker_id}_key_{i}"
                value = f"value_{worker_id}_{i}"
                
                # PUT
                store.put(key, value)
                
                # GET
                retrieved = store.get(key)
                
                # DELETE (–∫–∞–∂–¥—ã–π 5-–π)
                if i % 5 == 0:
                    store.delete(key)
                
                results["success"] += 1
                
            except Exception as e:
                results["errors"] += 1
    
    # –ó–∞–ø—É—Å–∫ 5 –ø–æ—Ç–æ–∫–æ–≤ –ø–æ 20 –æ–ø–µ—Ä–∞—Ü–∏–π
    print("üîÑ –ó–∞–ø—É—Å–∫ 5 –ø–æ—Ç–æ–∫–æ–≤ –ø–æ 20 –æ–ø–µ—Ä–∞—Ü–∏–π...")
    start_time = time.time()
    
    threads = []
    for i in range(5):
        thread = threading.Thread(target=worker, args=(i, 20))
        threads.append(thread)
        thread.start()
    
    for thread in threads:
        thread.join()
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {results['success']}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {results['errors']}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.3f} —Å–µ–∫")
    print(f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results['success']/duration:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
    print(f"üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {store.size()}")


def demo_transaction_logging():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    print("\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –ª–æ–≥–æ–º
    store = KVStore(log_file="demo_log.json")
    
    print("üìù –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    store.put("demo:key1", "–∑–Ω–∞—á–µ–Ω–∏–µ 1")
    store.get("demo:key1")
    store.put("demo:key1", "–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    store.put("demo:key2", "–∑–Ω–∞—á–µ–Ω–∏–µ 2")
    store.delete("demo:key1")
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    transactions = store._logger.get_transactions()
    print(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
    for tx in transactions[-3:]:
        print(f"  {tx['operation']} {tx.get('key', 'N/A')} - {tx['timestamp']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {"PUT": 0, "GET": 0, "DELETE": 0}
    for tx in transactions:
        op = tx.get("operation", "UNKNOWN")
        stats[op] = stats.get(op, 0) + 1
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:")
    for op, count in stats.items():
        print(f"  {op}: {count}")


def demo_performance():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("\n‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("-" * 40)
    
    store = KVStore()
    
    # –¢–µ—Å—Ç PUT –æ–ø–µ—Ä–∞—Ü–∏–π
    print("üìù –¢–µ—Å—Ç PUT –æ–ø–µ—Ä–∞—Ü–∏–π...")
    start_time = time.time()
    num_ops = 1000
    
    for i in range(num_ops):
        store.put(f"perf_key_{i}", f"perf_value_{i}")
    
    put_time = time.time() - start_time
    put_ops_per_sec = num_ops / put_time
    print(f"‚úÖ PUT: {put_ops_per_sec:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
    
    # –¢–µ—Å—Ç GET –æ–ø–µ—Ä–∞—Ü–∏–π
    print("üìñ –¢–µ—Å—Ç GET –æ–ø–µ—Ä–∞—Ü–∏–π...")
    start_time = time.time()
    
    for i in range(num_ops):
        store.get(f"perf_key_{i}")
    
    get_time = time.time() - start_time
    get_ops_per_sec = num_ops / get_time
    print(f"‚úÖ GET: {get_ops_per_sec:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
    
    # –¢–µ—Å—Ç DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
    print("üóëÔ∏è –¢–µ—Å—Ç DELETE –æ–ø–µ—Ä–∞—Ü–∏–π...")
    start_time = time.time()
    
    for i in range(num_ops):
        store.delete(f"perf_key_{i}")
    
    delete_time = time.time() - start_time
    delete_ops_per_sec = num_ops / delete_time
    print(f"‚úÖ DELETE: {delete_ops_per_sec:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
    
    print(f"üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {store.size()}")


def demo_error_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("\nüõ°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("-" * 40)
    
    store = KVStore()
    
    # –í–∞–ª–∏–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    store.put("valid_key", "valid_value")
    print("‚úÖ –í–∞–ª–∏–¥–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª—é—á
    try:
        store.put("", "empty_key_value")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∫–ª—é—á–∞: {type(e).__name__}")
    
    # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    try:
        store.put("valid_key", None)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ None –∑–Ω–∞—á–µ–Ω–∏—è: {type(e).__name__}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
    try:
        store.get("nonexistent_key")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞: {type(e).__name__}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
    try:
        store.delete("nonexistent_key")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞: {type(e).__name__}")
    
    print("‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print("üéØ KV-Store CLI - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    try:
        demo_basic_operations()
        demo_concurrent_operations()
        demo_transaction_logging()
        demo_performance()
        demo_error_handling()
        
        print("\n" + "=" * 50)
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìö –î–ª—è –∑–∞–ø—É—Å–∫–∞ CLI –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python kv_store_cli.py")
        print("\nüß™ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   pytest tests/ -v")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
